require 'io'
require 'os'
require 'hashmap'
require 'battery'
require 'json'
require 'vector'

local DEFAULT_PROCPATH = '/proc'

local head = [[{"version":1,"click_events":true,"stop_signal":0,"cont_signal":0}
[]]
print(head)
os.sleep(1)

local Output = @record{
  name: string,
  active: boolean,
  primary: boolean,
  -- rect: record{
  --   height: number,
  --   width: number,
  -- },
  rect: hashmap(string, integer),
  -- rect: rect,
}

local function get_width(): integer
  local fd = io.popen('i3-msg -t get_outputs')
  local r = fd:read()
  local outputs = json.parse(r, @sequence(Output))
  for i = 0, #outputs, 1 do
    local v = outputs[i]
    if v.primary == true then
      return v.rect["width"]
    end
  end
  return 0
end

local module_count = 3.0
local primary_width = get_width()
local min_width = primary_width - primary_width * 0.10 * module_count
-- local min_width = get_width() * 0.85

local function sum(...: varargs)
  local s: integer
  for i, v in ipairs(...) do -- iterate over all arguments
    s = s + v
  end
  return s
end

local last_idle = 0
local last_total = 0
local function get_cpu_usage()
    local _fd = assert(io.open(DEFAULT_PROCPATH.. '/stat', 'r'))
    local line = _fd:read("l")
    local pattern = string.format("cpu+%s",
      -- string.rep('%s+(%d+)', 10)
      string.rep('%s+(%d+)', 7)
      )

    local s, fields = line:match(pattern)
    local idle, total = tointeger(fields[4]), sum(fields)
    local idle_delta, total_delta = idle - last_idle, total - last_total
    last_idle, last_total = idle, total
    local utilisation = 100.0 * (1.0 - idle_delta / total_delta)
    _fd:close()
    return utilisation
end

local function get_mem_usage()
  local meminfo: hashmap(string, integer)
    local f = assert(io.open(DEFAULT_PROCPATH.. '/meminfo', 'r'))
    for line in f:lines() do
        local s, matches = line:match('(%w+):%s+(%d+)%s+(%w+)')
        local key, value, unit = matches[1], matches[2]
        local match, _ = (string.match(value, '%d+'))
        if match then
          meminfo[key] = tointeger(value)
        end
        if key == 'MemTotal' then
        end
    end
    f:close()
    local percentage_used = tointeger( ( meminfo['MemTotal'] - (
        meminfo['Buffers'] + meminfo['Cached'] + meminfo['MemFree']
    ) ) / meminfo['MemTotal'] * 100 )
    return percentage_used
end

local function get_status()
  local dev = "CMB0"
  local devpath = '/sys/class/power_supply/' .. dev
  local status: stringbuilder

  local status_array: sequence(string)
  local status_item: string
  
  local count = 5
  while true do
    local item_num = 0

    status_item = string.format(
      [[{"full_text": "%s", "name" : "datetime",
      "align":"center", "min_width": %d}]],
      -- "align":"center", "min_width":1330}]],
      -- "align":"center", "min_width":2160}]],
      os.date('%Y-%m-%d %a %H:%M:%S'), min_width)
    item_num = item_num + 1
    status_array[item_num] = status_item

    if count >= 5 then
      status_item = string.format(
        '{"full_text": " cpu %02d%% ", "name" : "cpu"}',
        get_cpu_usage())
      item_num = item_num + 1
      status_array[item_num] = status_item
      status_item = string.format(
        '{"full_text": " mem %02d%% ", "name" : "mem"}',
        get_mem_usage())
      item_num = item_num + 1
      status_array[item_num] = status_item

      status_item = string.format(
        '{"full_text": " %s ", "name" : "battery"}',
        get_battery_info(devpath, false)
      )
      item_num = item_num + 1
      status_array[item_num] = status_item
      count = 0
    end

    status:write('[')

    for i = 1, #status_array - 1 do
      status:write(status_array[i], ',')
    end
    status:write(status_array[#status_array])

    status:write('],\n')
    io.stdout:write(status)
    io.stdout:flush()
    os.sleep(1)
    count = count + 1
  end
end

local status = get_status()
